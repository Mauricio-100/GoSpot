#!/bin/sh

# GoSpot Script v2 (Version D√©tective) pour iSH Shell
# Par Mauricio

# Couleurs pour un affichage plus clair
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
RESET="\033[0m"

# Fonction pour le mode SERVEUR
run_server() {
    echo "${GREEN}--- D√©marrage de GoSpot en mode SERVEUR ---${RESET}"
    echo "${YELLOW}ACTION REQUISE : Assurez-vous d'avoir activ√© le 'Partage de connexion' dans les R√©glages de cet iPhone.${RESET}"
    
    if ! pgrep -f "sshd" > /dev/null; then
        echo "D√©marrage du serveur SSH (sshd)..."
        [ ! -f "/etc/ssh/ssh_host_rsa_key" ] && ssh-keygen -A
        sshd
        echo "${GREEN}Serveur SSH d√©marr√©.${RESET}"
    else
        echo "${GREEN}Le serveur SSH est d√©j√† en cours d'ex√©cution.${RESET}"
    fi
    
    SERVER_IP=$(ip a | grep -o '172.20.10.1')
    echo "\n${GREEN}‚úÖ Serveur pr√™t !${RESET}"
    echo "En attente d'un client qui se connecte au Partage de connexion..."
    echo "Mon adresse IP sur ce r√©seau est : ${GREEN}$SERVER_IP${RESET}"
}

# Fonction pour le mode CLIENT
run_client() {
    echo "${GREEN}--- D√©marrage de GoSpot en mode CLIENT ---${RESET}"
    echo "${YELLOW}ACTION REQUISE : Assurez-vous d'√™tre connect√© au Wi-Fi du t√©l√©phone serveur.${RESET}\n"
    
    # --- LOGIQUE DE D√âTECTION DE CL√â ---
    echo "üïµÔ∏è  Recherche d'une cl√© SSH existante dans tout le terminal..."
    # On cherche les types de cl√©s les plus courants, en ignorant les erreurs de permission
    SSH_KEY_PATH=$(find / -type f \( -name "id_ed25519" -o -name "id_rsa" \) 2>/dev/null | head -n 1)

    if [ -z "$SSH_KEY_PATH" ]; then
        echo "${YELLOW}Aucune cl√© SSH trouv√©e. Cr√©ation d'une nouvelle cl√© (ed25519)...${RESET}"
        # Cr√©er le dossier .ssh s'il n'existe pas
        mkdir -p "$HOME/.ssh"
        chmod 700 "$HOME/.ssh"
        # G√©n√©rer une cl√© moderne sans mot de passe
        ssh-keygen -t ed25519 -N "" -f "$HOME/.ssh/id_ed25519"
        SSH_KEY_PATH="$HOME/.ssh/id_ed25519"
        echo "${GREEN}Nouvelle cl√© cr√©√©e √† : $SSH_KEY_PATH${RESET}"
    else
        echo "${GREEN}Cl√© trouv√©e ! Utilisation de : $SSH_KEY_PATH${RESET}"
    fi
    
    PUBLIC_KEY_PATH="${SSH_KEY_PATH}.pub"
    if [ ! -f "$PUBLIC_KEY_PATH" ]; then
        echo "${RED}ERREUR : La cl√© priv√©e a √©t√© trouv√©e, mais sa cl√© publique (.pub) est manquante !${RESET}"
        echo "Essayez de la reg√©n√©rer avec : ssh-keygen -y -f $SSH_KEY_PATH > $PUBLIC_KEY_PATH"
        exit 1
    fi
    # --- FIN DE LA LOGIQUE DE D√âTECTION ---

    echo "\nRecherche du serveur GoSpot sur le r√©seau..."
    sleep 2
    SERVER_IP=$(arp -a | grep -o '172.20.10.1')

    if [ -z "$SERVER_IP" ]; then
        echo "${RED}ERREUR : Serveur introuvable. √ätes-vous bien connect√© au Partage de connexion ?${RESET}"
        exit 1
    fi
    
    echo "${GREEN}Serveur trouv√© ! Adresse : $SERVER_IP${RESET}"
    echo "\nTentative de connexion avec la cl√©..."
    echo "${YELLOW}NOTE : La premi√®re fois, vous devrez entrer le mot de passe 'root' du serveur pour autoriser la cl√©.${RESET}"
    
    # On utilise la cl√© publique trouv√©e pour l'autorisation
    ssh-copy-id -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i "$PUBLIC_KEY_PATH" root@$SERVER_IP
    
    if [ $? -eq 0 ]; then
        echo "${GREEN}Cl√© autoris√©e ! Connexion en cours...${RESET}"
        # On utilise la cl√© priv√©e trouv√©e pour la connexion
        ssh -i "$SSH_KEY_PATH" root@$SERVER_IP
    else
        echo "${RED}La copie de la cl√© a √©chou√©. V√©rifiez le mot de passe du serveur.${RESET}"
    fi
}

# Logique principale du script
case "$1" in
    serve)
        run_server
        ;;
    connect)
        run_client
        ;;
    *)
        echo "Usage: GoS [commande]"
        echo ""
        echo "Commandes disponibles :"
        echo "  serve    : D√©marre en mode serveur (sur le tel qui partage la connexion)"
        echo "  connect  : D√©marre en mode client (sur le tel qui se connecte au Wi-Fi)"
        ;;
esac
